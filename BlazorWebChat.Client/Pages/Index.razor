@page "/"
@using BlazorWebChat.Shared
@inject NavigationManager navigationManager

<div class="content px-4">
    <h1>Chat</h1>

    @if (chatting)
    {
        <div id="scrollbox" style="width: 50%;">
            @foreach (var item in messages)
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
            <hr />
            <textarea placeholder="enter your comment" @bind="@newMessage"></textarea>
            <button class="btn btn-outline-primary" @onclick="@SendAsync">Send</button>
        </div>
    }
</div>

@code {
    bool chatting = false;

    string username = null;

    ChatClient client = null;

    string message = null;

    string newMessage = null;

    List<Message> messages = new List<Message>();

    async Task Chat()
    {
        try
        {
            // remove old messages if any
            messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;
            client = new ChatClient("admin", baseUrl);
            // add an event handler for incoming messages
            client.MessageReceived += MessageReceived;
            // start the client
            Console.WriteLine("Index: chart starting...");
            await client.StartAsync();
            Console.WriteLine("Index: chart started!");

            chatting = true;
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, "admin", StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (chatting)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended";
            chatting = false;
        }
    }

    async Task SendAsync()
    {
        if (chatting && !string.IsNullOrWhiteSpace(newMessage))
        {
            // send message to hub
            await client.SendAsync(newMessage);
            // clear input box
            newMessage = "";
        }
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; }
        public string Body { get;}
        private bool Mine { get; }

        public string CSS => Mine ? "sent" : "received";
    }

    protected override async Task OnInitializedAsync()
    {
        await Chat();
    }
}
